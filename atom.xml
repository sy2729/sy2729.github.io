<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜郎西</title>
  
  <subtitle>桃李春风一杯酒，江湖夜雨十年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-20T12:17:44.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shuai Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再观《机器人总动员》有感</title>
    <link href="http://yoursite.com/2019/07/16/%E5%86%8D%E8%A7%82%E3%80%8A%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%80%BB%E5%8A%A8%E5%91%98%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://yoursite.com/2019/07/16/再观《机器人总动员》有感/</id>
    <published>2019-07-16T15:58:59.000Z</published>
    <updated>2019-07-20T12:17:44.305Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这部电影看过很多遍了，高中的时候一遍，后来大学看过两遍，现在公司组织管培生去看电影，又是一遍。</p>    <div id="aplayer-HPVfdEhR" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2005760" data-server="netease" data-type="song" data-mode="circulation" " data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"></div><p>第一次看的那种感动仍然还在，机器和机器之间单纯直接的情感反衬出对环境的人文反思，对人类世界麻木的无情嘲讽，好在影片是少儿向，寓意在于给人美好的希望和教育意义，并没有揭示仅凭一株植物就断定地球生态环境的恢复，可以居住，并贸然带领所有仅存的人类回到地球的行为是多么不合情理，也没有着重篇幅暗示人类回到地球之后面对满目疮痍的地球可能需要付出怎样努力才能开疆拓土。但是轻松的剧情之下依然潜伏着很多可怕的秘密。</p><p><img src="http://thelibertycaucus.com/wp-content/uploads/2014/06/DI-Walle-1-DI-to-L10.jpg" alt="瓦力和伊娃"></p><p>船长在和机器人代理舵手争辩时，偶然一眼扫见历代船长和舵手的合影。这是一个意味深长的镜头，历代合影中，船长身后的机器人舵手随着每一代船长的传承距离船长的越来越近，到最后几乎贴着船长的后背 ，占据照片的一半的篇幅，大有取代人类船长之势。这其实早为舵手的叛变埋下了伏笔。那就是机器人随时时间的流逝和科技的发展逐渐有了自己的意识，并且想要开始制衡人类。</p><p><img src="https://shuai-hexo-blog-image.oss-cn-shenzhen.aliyuncs.com/hexo-client/2019/07/20/b483e0b0-aacd-11e9-99b9-492b08b233ee.jpg" alt="肥胖如猪的船长"></p><p>影片中的大多数机器人都是只会按照规章制度执行指令的机器——乍一看我们会以为是这样，然而影片结尾处面对伊娃和瓦利恋情的公开，一大堆飞船上的机器人“战友”急匆匆冲过来又赶紧不当电灯泡躲起来，这一幕已经体现了机器人很大程度上实际拥有人类的各种微妙的情绪和思想。</p><p>而我实现无法想象拥有如此智能的机器人，在拥有强大功能和生命力的同时（连最低级的垃圾处理机器人瓦力都可以通过太阳能为自己无限续命，通过更换零件实现永生），为什么需要向人类臣服。而此时的人类在飞船上已然成为了被豢养的机器人的”宠物猪“，终日沉浸在机器所营造的美好幻梦之中，穿着统一的制服，永远喝着一样的饮料，过着古人一般日出而作，日落而息的生活（然而这个日的规则和时间却由机器所掌控），看着眼前虚拟的屏幕和其他人类社交（却无法感知身边活生生的同胞），肥胖得只能通过椅子行动——甚至有可能从出生到老死终日未曾离开过自己的椅子。这样看来，人类面对机器人实则未有半分胜算，而最后却只因船长关掉舵手的开关而取得胜利，未免太过牵强。而我认为舵手对船长回归地球意图的反抗断然不仅是因为登船之初总统所下达的不得返回地球的秘密指令，而或许是其早已产生智能，想通过继续将人类禁锢在飞船之上，而达到另一些不为人所知的目的。</p><p>整部影片没有显示出人类的任何智慧。比如制造机器人的科学家在哪儿？人类看似拥有如此的高科技，可是普通的人民却如此臃肿，娱乐至死。那么是什么资本让人类亲手毁灭了地球，进入太空之后却仍旧能够不用付出任何代价享受这样的生活？电影对此没有任何交代。想必是考虑电影的风格，对于我等阴谋说的剧情不想过多交代否则影响这部面向小孩的电影美好性。但是个人认为，作为一个成人观看这部电影，是很有必要思考这些可能的“阴谋”的。</p><p>整部影片的反讽意味明确，人类过分依赖科技，导致自身智慧甚至体态的退化，出现反向进化的趋势；而另一头，日趋智能的机器人却在服侍、服务人类的时候碰撞出了爱情和人性。看似荒诞的情节实际背后充满对人类未来的担忧。</p><p>说回现在。公司所做的mBot的长相与剧中的Wall-E有几分相似，可想而知Jasen在创建公司初期怀揣的梦想就是能够有一天至少还原出Wall-E这类级别机器人的。但目前来看，我们的年代所掌握的技术离这类机器人还有不短距离。</p><p><img src="https://shuai-hexo-blog-image.oss-cn-shenzhen.aliyuncs.com/hexo-client/2019/07/20/d007cae0-aacd-11e9-99b9-492b08b233ee.jpg" alt="Wall-E"></p><p>总之，这部剧让我明白，人类不过是众多生物中平凡的一类。如果以为科技的发展能让我们高枕无忧什么也不用做，那只会更快地走向灭亡和被淘汰。个人比较悲观，所以也会有这种危机感，很多人看到这部电影所讲述的机器人的美好，我只看到这部电影中人类的悲惨命运，真的回到地球就能幸福快了吗，已经产生智慧的机器人，真的能与人和平共处吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂感" scheme="http://yoursite.com/tags/%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>【转】如何设计出一份好的调查问卷？</title>
    <link href="http://yoursite.com/2019/07/16/%E3%80%90%E8%BD%AC%E3%80%91%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%87%BA%E4%B8%80%E4%BB%BD%E5%A5%BD%E7%9A%84%E8%B0%83%E6%9F%A5%E9%97%AE%E5%8D%B7%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/07/16/【转】如何设计出一份好的调查问卷？/</id>
    <published>2019-07-16T01:20:07.000Z</published>
    <updated>2019-07-20T11:53:00.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近开始负责MakeBlock新出品不久的mBlock编程平台扩展设计器的体验调查访问，因此搜集了一些关于产品如何设计调查问卷的资料，其中这篇来自 <span style="color: #ddd;">简书</span>的一篇文章还不错，因此转载至我的博客作记录。<a href="https://www.jianshu.com/p/d4bc3531097c#" target="_blank" rel="noopener">原文地址 - 简书</a></p><h1 id="内容部分"><a href="#内容部分" class="headerlink" title="内容部分"></a><strong>内容部分</strong></h1><p>首先应该明确一点：问卷调查是一项有目的的研究实践活动，无论一份问卷设计的水平高低与否，其背后必然存在着特定的研究目的。因此将要设计的问卷就是为你的特定研究目的服务的。这是设计问卷之前必须植根于脑海中的一个观念。既然问卷调查是一项有目的的研究实践活动，那么从理论指导实践的角度出发进行就是必须的，即设计问卷前必须要做好充足的理论准备，宏观层面上应做到以下两点：</p><p>1.明确你们研究的主题是什么</p><p>2.明确设计者（即研究主体：你们）想通过问卷调查获取的信息有哪些</p><p>这点必须通过阅读文献来进行查漏补缺：如果通过文献阅读就能够获知想要的信息，那么就根本不必进行问卷调查；因为你想获取的信息并不都是必须要通过问卷调查来获取的，要清楚一点，你是站在学术共同体内已有的研究经验上展开研究的，前人所作的工作某种意义上就是为你服务的。</p><p>具体进行问卷内容设计时，我们分两部分进行讲述，即问题和选项的设计。</p><h2 id="一、问题的设计"><a href="#一、问题的设计" class="headerlink" title="一、问题的设计"></a>一、问题的设计</h2><p>需要遵循以下几个原则：</p><p><strong>1.可问可不问的坚决不问</strong></p><p>要明白我们的问卷容量是有限的，因为填写者的时间有限。理想的问卷设计应是通过最少的问题获取最大的研究信息。</p><p><strong>2.无关研究目的的不问</strong></p><p>时刻谨记一点：你的问卷是为你的研究目的服务的，千万不要本末倒置。</p><p><strong>3.创造性的设计问题</strong></p><p>你的研究目的是抽象而宏观的，而你要设计的问卷则是通过具体的提问将研究目的进行微观层面上的分解，因此如何通过询问一个个背后有理论支撑与研究目的的问题来获取到你想要的信息，就需要你在问题设置上下功夫了。</p><p><strong>4.循序渐进、版块化的设计结构</strong></p><p>我们知道，此时的研究是通过询问一个个问题来获取信息的，而人的思维并不是杂乱无章的，尤其是受过高等教育的人。倘若你所问的问题是突兀的、无逻辑的，不仅让回答者难以回答，等到后期进行问卷分析时对于研究者而言，也是一个不小的麻烦，因为你根本就没想好怎么去研究！！那么何谈设计出一份好的问卷来呢？又怎么去进行研究后期的逻辑化文章写作呢？</p><p>问卷设计之前所做的一系列理论准备工作，包括书籍、专著、文献的阅读，老师的讲解与指导，同伴之间的讨论等等，这些功夫都是为你的问卷设计服务的，目的只有一个：更加明晰你的研究思路。那么到了问卷设计阶段，前期工作的重要性就凸显出来了——你的问卷如何进行逻辑式的设计？研究主题的特征是抽象和宏观，那么落实到具体的研究工作中来则要想办法将其逐步的具体化。“逐步的具体化”就表明了研究工作是慢慢深入的，不可能一蹴而就，这也和人的思维是类似的：你的认识是逐渐深化的，研究也是这样。所以我们之前的工作一定要做好，研究同伴之间的每一次讨论都应是有目的的讨论，明确最终的讨论结果，并记录在案，即大的层面上形成你们的“研究共识”：研究应该涉及哪些方面。这样在后期设计问卷时，大家就可以围绕着所形成的研究共识展开问题的设计了。否则单打独斗式的设计虽然用时少（因为少了讨论时间）但也极有可能出现思维漏洞，而集体讨论则可避免这一缺陷，并且有时参加头脑风暴还可碰撞出个人不可能产生的思维火花。</p><p>按照之前讨论的研究层面进行问卷的层面化设计，这时问卷呈现出来就是版块化的；而这也正是你们无形的智力成果，而不单单是几道问题而已。填写者并不了解你们的秘密，只有你们自己知道；他只是清楚一点：问卷的背后有目的。</p><h2 id="二、选项的设计"><a href="#二、选项的设计" class="headerlink" title="二、选项的设计"></a>二、选项的设计</h2><p>选项实际上是设计出的问题的深化，也是你们分析问卷之前所做的最后一次思考工作：将研究目的变量化。研究目的变量化的高低直接决定了研究目的的实现程度。我们要做的就是：将研究目的创造性的进行变量化改写。变量化即一个个具体而有目的的选项，A、B、C……</p><p>选项设计的根本原则是：周延性，除此之外别无其他。因为这关系到同行对你们研究的评价，关系到研究者的学术声誉。试想：假如你设计出的选项不够周延，遗漏了必要的信息，接着你拿着这样的问卷进行调查然后收集数据进行分析，撰写调研报告。即使你的文章最后发表了，同行一眼就能看出文章的漏洞所在，请问此时你的说服力在哪里？本来实证研究在学术研究中就是非常难得的，而且也是被学术界所提倡的，因为它是建立在客观的数据之上展开研究的，并非纯粹的理论思辨，同时它也耗费了研究者的人力、物力和财力；倘若问题出现在周延性上，那么对实证研究来说则是致命一击，因为你无可辩驳。</p><h1 id="形式部分"><a href="#形式部分" class="headerlink" title="形式部分"></a>形式部分</h1><p>问卷形式上共由六部分组成：问卷标题、导语部分、基本信息、主体内容、结语和整体。以下逐个介绍：</p><h2 id="一、问卷标题"><a href="#一、问卷标题" class="headerlink" title="一、问卷标题"></a>一、问卷标题</h2><p>遵循“明确+简洁”原则。</p><h2 id="二、导语部分"><a href="#二、导语部分" class="headerlink" title="二、导语部分"></a>二、导语部分</h2><p>导语部分的撰写是非常关键的，因为它关系到填写者的第一印象分。内容撰写顺序依次为：1.介绍调查者的身份：来自哪个学校的学生；2.此次问卷调查的抽象目的；3.问卷填写说明（不记名、选勾/写选项/写文字等等）；4.研究用途的说明：学术研究还是商业用途。而这一切都展示着你们调查者的研究素养，所以一定要重视；5.调研者的全体称呼和时间</p><h2 id="三、基本信息"><a href="#三、基本信息" class="headerlink" title="三、基本信息"></a>三、基本信息</h2><p>分为两部分：填写者信息和调研信息。</p><p>（一）填写者信息</p><p>一般来说必须包括的是：性别、年龄/年级、职业/专业；其他则视研究目的而定。</p><p>（二）调研信息</p><p>包括三部分：调研员、调查时间和调查地点</p><p>这样做的好处是后期进行问卷统计时便于输入与查错，而且责任明确。</p><h2 id="四、主体内容"><a href="#四、主体内容" class="headerlink" title="四、主体内容"></a>四、主体内容</h2><p>形式上的要求有：1.排版整齐；2.无错别字；3.无选项排序错误</p><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>一般来说，出于礼貌，一定要对调查者表示感谢，感谢语、祝福语、时令关心语等等都可以。</p><p>如要做追踪调查时，则应在最后设置，理由：降低填写者的戒备心。首先，你作为调查者得开诚布公地留下你的联系方式，接着再要求对方留下人家的。给对方多一些选择的余地，现在社交网络这么发达，填写者几乎都有各个社交账号，这样搜集到的信息的几率也大一些。</p><p>微信、QQ、邮箱、微博、电话等等。</p><h2 id="六、整体"><a href="#六、整体" class="headerlink" title="六、整体"></a>六、整体</h2><p>1.问卷上应插入页码，格式为“共几页，第几页”（必要时写上“后面还有”等字样，提示填写者作答后面的问题）；</p><p>2.问卷上方最好填写“共几份，第几份”（便于之后的数据录入并检查）。</p><h1 id="检查部分"><a href="#检查部分" class="headerlink" title="检查部分"></a>检查部分</h1><p>问卷设计好之后，必不可少的就是对问卷进行检查纠错，千万不能一设计好就觉得大功告成了，欢喜地到打印店大批量的打印！因为一个瑕疵的存在直接影响了填写者的直观感受和同行对你们研究工作的评价；同时这也体现着研究者的研究素养问题。所以问卷设计好之后，需要做两件事：一是研究同伴之间的问卷填写；二是小范围内的预调研。这样做的目的：发现形式上的错误；发现选项上的周延与否。之所以要做小范围内的预调研，主要是出于思维固化的考虑。因为研究同伴之间毕竟有一段时间思维完全是与此问卷相关的，可能掉进了思维小圈子中；而其他非研究者则不同，他们是第一次接触问卷，思维可能更加灵活，可能会考虑到你们遗漏了的，即“旁观者清，当局者迷”。具体而言，如下：</p><p>1.先做个小范围的预调研，发现问卷形式上的错误，如选项排列A、B、C、“E”、这种低级错误；发现选项的不周延性；</p><p>2.斟酌每个问题的提出目的；</p><p>3.进一步从内容到形式入手完善问卷；</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>一份优秀的问卷从内容到形式上均应体现着研究者良好的研究素养；这对填写者、学术共同体和研究者自己均是一份尊重。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="产品" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>纽约再见</title>
    <link href="http://yoursite.com/2019/06/08/%E7%BA%BD%E7%BA%A6%E5%86%8D%E8%A7%81/"/>
    <id>http://yoursite.com/2019/06/08/纽约再见/</id>
    <published>2019-06-08T02:59:11.000Z</published>
    <updated>2019-07-20T15:09:29.304Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-HQBqNLeX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="16328033" data-server="netease" data-type="song" data-mode="circulation" " data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"></div><p>他们说纽约是一个非常有包容性的城市，各种文化、美食、民族、阶层，无不在这里有自己一方净土。可是我自己仍然觉得这个城市太快，太碎，太不符合自己对于安居乐业的居住地的想象。</p><p>终于收拾好了包裹，向居住了一年的Ubry小区道别。</p><p>当初搬过来的时候憧憬着自己之后如何一个人在这美好的小区学习，奋斗，升职，加薪。现在回想，觉得有些天真了，没有经历大风大浪的避世隐居，是禁不住世间诱惑，难关，酸甜苦辣的考验的。</p><p>我可能会或不会在将来怀念这一段孤独而痛苦的时光，但一定会感谢他渐渐帮我拨开迷雾，指引自己矫正之前偏离的轨迹。</p><p>再见，纽约。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂感" scheme="http://yoursite.com/tags/%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>React踩坑记</title>
    <link href="http://yoursite.com/2019/02/08/React%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/08/React踩坑记/</id>
    <published>2019-02-08T13:28:28.000Z</published>
    <updated>2019-07-20T11:53:00.076Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.React中<br>使用import react-css-modules时，一定要把<code>className</code>换成<code>styleName</code>（这个花了我一个半小时才解决）</p><p>2.同样是使用react-css-modules时，如果要绑定多个styleName，需要在export时的CSSModule那里加载第三个option参数：<code>{&quot;allowMultiple&quot;:true}</code>，方可绑定多个styleName</p><p>3.React 动态绑定背景图片： <code>style={\{\backgroundImage:`url(${i.img})`}\}\</code></p><p>4.使用<code>React.Fragment</code>标签包裹众多标签可以使render时不会出现多余的没用的影响结构的div标签</p><p>5.Create-React-App <strong>Deploy</strong> 时</p><p>如果想自动发布到Github的gh-pages，那么使用以下命令：<br><code>npm install gh-pages --save-dev</code></p><p>如果首次deploy中途不幸中断，想要再次deploy失败现实already exist时，使用以下命令清楚缓存：<br><code>rm -rf node_modules/gh-pages/.cache</code></p><p>6.BrowserRouter 在deploy到github page上时会有问题，需要切换成hashRouter<br>然后在config文件中设置homepage属性，要设置为部署后的域名，如：<code>&quot;homepage&quot;: &quot;https://sy2729.github.io/laodianwei&quot;</code></p><p>7.React中阻止冒泡<br>React中对事件进行了二次封装，如果是在React自身组件上监听的事件，需要用<code>e.nativeEvent.stopImmediatePropagation()</code>；</p><p>但如果是监听在document上的事件是无法阻止冒泡的，建议修改为对window的监听。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="踩坑记" scheme="http://yoursite.com/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习</title>
    <link href="http://yoursite.com/2019/01/01/MongoDB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/01/01/MongoDB学习/</id>
    <published>2019-01-01T14:01:12.000Z</published>
    <updated>2019-07-20T11:53:00.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>mongod - mongo</li><li>mongo dbs</li><li>use xxxx</li><li>show collections</li><li><p>db</p></li><li><p>db.[collection].find().pretty() 可以美化规整展示结果</p></li><li><p>use db不仅可以进入，还可以新建</p></li><li>增： db.user.insert({“name”: “Shuai yuan”})    进行数据插入</li><li>查：db.user.find()      进行查找</li><li>db.user.findOne()     自动返回首个数据</li><li>改：db.user.update(第一个参数为原始数据，第二个为新的数据)</li><li>删： db.user.remove() 删除</li><li><p>db.user.drop()删除整个库 || db.dropDatabase()</p></li><li><p>在 JS中写mongoDB， var db = connect(database的名字)；然后 “mongo 文件名” 运行</p></li><li><p>在terminal中直接载入/运行文件： load(文件路径)</p></li><li><p>update修改器</p></li></ul><ul><li>ObjectId()可以创建一个随机ID并且这个id值有自带的方法getTimestamp()可以查询添加时间</li><li>$gt - greater than</li><li>$gte - greater than or equal</li><li>$lt</li><li>$lte</li><li>$or</li><li>$exists - 接受boolean值</li><li>如果嵌套很多层的数据，可以通过key.key.key…的方式来find得到值</li><li>查询的时候，如果想要查询的结果是数组中的第一个位置，可以这么申明： hobbies.0.name</li><li>使用变量名查询时，一般是{var: value}的形式,其实后面一般不仅可以跟值，还可以跟正则表达式: {$regx: “xiao”}</li><li>对搜索数组长度的限制: {hobbies: {$size: 2}}</li><li>Find等方法的第二个参数：projection，指根据查找数据中的第二个参数部分声明的数据值来显示查找到的数据 - 按需取用，加快查询速度：  {hobbies: 0} - 显示查找到的数据中所有的数据，但是隐藏hobbies部分； {hobbies: 1} - 只显示查找到的数据中hobbies数据，但是隐藏其他数据</li><li>findOneAndUpdate方法第三个参数{new: true} - 返回更新后的文档</li><li>Update方法第三个参数{multi: true}更新多个</li><li>findOneAndUpdate方法第三个参数{upsert: true} - 未找到就插入</li><li><p>find({}).count() - 统计数量</p></li><li><p>Aggregate</p><ul><li>$match</li><li>$group<ul><li>$sum</li><li>$avg</li></ul></li><li>$unwind</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="http://yoursite.com/2018/10/20/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/20/前端面试题/</id>
    <published>2018-10-20T13:56:52.000Z</published>
    <updated>2019-07-20T11:53:00.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.手写promise版本的ajax：<a href="https://blog.csdn.net/prince_fmx/article/details/77873795" target="_blank" rel="noopener">https://blog.csdn.net/prince_fmx/article/details/77873795</a></p><p>2.正则表达式文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a><br>                  <a href="https://juejin.im/post/5ac1f1106fb9a028be362731" target="_blank" rel="noopener">https://juejin.im/post/5ac1f1106fb9a028be362731</a></p><p>3.canvas绘图知识点：（1）清除画布：<code>clearRect(a, b, c, d)</code><br>                     (2) 画画<br>                    (3) framerate - 动画帧<br>                     (4) 碰撞检测</p><p>4.webpack - loader、pugin、entry、output</p><p>5.浏览器页面渲染过程</p><p>6.Vue双向绑定原理：<code>DefineProperty</code>、<code>DocumentFragment</code>、发布订阅模式、观察者模式 （思考eventBus）</p><p>7.Promise、Promise的Ajax实现 </p><p>8.深拷贝，改写<code>Object.assign()</code>（<code>Object.assign</code>在某些情况下是浅拷贝，在某些情况下是深拷贝，因此不能算完整意义上的深拷贝），以及其他的深拷贝方式</p><p>9.同上，jQuery如何使用<code>$extend</code>来扩充功能，编写插件</p><p>10.页面从刚加载到加载完成： </p><ul><li><code>Window.onload</code></li><li><code>DOMContentLoaded</code></li></ul><p>11.排序算法</p><p>12.防抖 - <code>debounce</code>， 节流 - <code>throttle</code></p><ol><li>aync await</li></ol><p>14.面向对象和原型链</p><p>15.优化首屏加载：<br>    1、尽可能的缩小webpack或者其他打包工具生成的包的大小<br>    2、使用服务端渲染的方式<br>    3、使用预渲染的方式<br>    4、使用gzip减小网络传输的流量大小<br>    5、按照页面或者组件分块懒加载</p><p>16.图片预加载和懒加载：<br>    预加载：1.将图片写到css中，但是让图片不显示（<code>background-size: 0</code>），把class名加到页面上<br>            2.通过<code>new Image</code>或者createElement image来预加载图片；<br>            3.使用Ajax等库实现；<br>            以上都是在等到页面加载完成之后再开始<br>            4.html5的原生特性：<code>prefetch</code>和<code>prerender</code></p><pre><code>懒加载：将图片链接写在`data-src`上，滑到再加载； </code></pre><p>17.怎样将自定义函数挂载到jQuery上</p><p>18.<code>document.createDocumentFragment()</code> 和<code>document.createElement()</code>的区别</p><p>19.slice\splice\split\replace\repeat</p><p>20.事件委托</p><p>21.垃圾回收、内存泄露</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="职业" scheme="http://yoursite.com/tags/%E8%81%8C%E4%B8%9A/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue踩坑记</title>
    <link href="http://yoursite.com/2018/09/21/Vue%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/21/Vue踩坑记/</id>
    <published>2018-09-21T13:51:17.000Z</published>
    <updated>2019-07-20T11:53:00.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这里面每个坑都至少花了我一个小时才figure out😂，血泪的教训</p><ul><li><code>Props</code>的命名不要出现camelCase</li><li><p><code>$emit</code> 的事件名最好用-的形式</p></li><li><p>本地图片引用要么放在public里用‘/’绝对路径来引用，要么用require来引用</p></li></ul><ul><li><p>nom run build 打包后index空白，路径不对的问题：</p><ul><li>在vue-cli 2中：网上有很多教程</li><li>在vue-cli 3中: 直接在根目录添加<code>vue.config.js</code>，然后<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    baseUrl: <span class="string">'./'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Ant Design Vue这个UI框架中，教程有的部分真的TM写得屎烂，明明有些名称是class样式，写尼玛写成组件的形式放在展示的代码里。我艹你大爷。我还感谢你写个框架。哈。哈。哈。哈。</p></li><li><p>在使用Vue transition时如果想要使用transform等属性时不起作用，多半是组件内部的transform属性优先级更高，在声明vue transition的属性是给<code>transform</code>加上<code>!important</code>就能解决这个问题</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="踩坑记" scheme="http://yoursite.com/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>web性能优化策略</title>
    <link href="http://yoursite.com/2018/09/17/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/09/17/web性能优化策略/</id>
    <published>2018-09-17T09:25:22.000Z</published>
    <updated>2019-07-20T11:53:00.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>web性能优化一般从一下几个角度来进行</p><ul><li>使用 CDN</li><li>使用 Cache-Control</li><li>使用 Etag</li><li>使用 Gzip</li><li>合并文件（CSS、JS、图片）</li><li>调整 CSS 和 JS 的位置</li><li>压缩图片的工具</li><li>增加域名以并行下载资源</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="开发经验" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS中实现两种继承-ES5和ES6</title>
    <link href="http://yoursite.com/2018/09/17/JS%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%A4%E7%A7%8D%E7%BB%A7%E6%89%BF-ES5%E5%92%8CES6/"/>
    <id>http://yoursite.com/2018/09/17/JS中实现两种继承-ES5和ES6/</id>
    <published>2018-09-17T08:26:16.000Z</published>
    <updated>2019-07-20T11:53:00.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>JS本来不像Java这样的语言有class和继承这种特性的，JS有自己的类似于实现继承特性的语法功能，叫做原型链。后来为了让JAVA程序员也能快速理解并上手JS，ES6推出了JS中的Class，所以在此总结下新旧两版中分别实现继承的方法。</p><p>首先，以一段代码为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name</span><br><span class="line"> &#125;</span><br><span class="line"> Human.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"我叫"</span>+<span class="keyword">this</span>.name+<span class="string">"，我在跑"</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">     Human.call(<span class="keyword">this</span>, name)</span><br><span class="line">     <span class="keyword">this</span>.gender = <span class="string">'男'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">Man.prototype.fight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'糊你熊脸'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在如果我们要实现<code>var man1 = new Man()</code>中man1具有Human的属性，需要实现Man构造函数对Human构造函数的继承。那么：<br>在ES5中的写法：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Man</span>.proto<span class="keyword">type</span>.__proto__ = <span class="type">Human</span>.prototype</span><br></pre></td></tr></table></figure></p><p>只需要一句话，将man1的构造函数Man的原型链接到Human构造函数那里就可以了，这样，man1就可以使用Human的属性，也就是’run‘这个函数。</p><p>但是此法在IE中有bug，IE不支持用户直接操作<code>__protp__</code>属性，因此，有一个巧招：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> f = function()&#123;&#125;</span><br><span class="line">f<span class="selector-class">.prototype</span> = Human.prototype</span><br><span class="line">Man<span class="selector-class">.prototype</span> = new f()</span><br></pre></td></tr></table></figure></p><p>直接声明一个新的空构造函数，将此构造函数的prototype设置为和Human的一样（这样做的原因是为了让这个f函数也能构造出Human函数中构造出的公有属性），然后将Man的构造函数设置为由f构造出来的函数，从而在原来的最初Object构造函数之前，插入一个f。</p><p>进一步说，因为要做到<code>Man.prototype.__proto__ = Human.prototype</code>,也就是<code>Man.prototype.__proto__ = f.prototype</code>，但是又不能直接操作<code>__protp__</code>，因此可以用new来实现，因为在<code>var obj = new Fn()``new</code>默认会将右边构造函数的prototype赋值到左边的<code>__protp__</code>上。但是为什么不直接<code>new Human()</code>呢？因为New不仅会默认做上述的步骤，还会做这些：<br>    1.产生一个空对象<br>    2.this = 空对象<br>    3.this.<strong>proto</strong> = Fn.prototype<br>    4.执行Fn.call(this, x, y, z …)<br>    5.return 4 的结果<br>问题就出在4这一步，Human这个函数上除了构造公有属性外，还有自身的属性name，那么<code>new Human()</code>会导致其自身的私有属性也跑到Man的原型链上去，虽然不会造成什么问题，但是这是我们不需要的。</p><p>ES6写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name</span><br><span class="line">     &#125;</span><br><span class="line">     run()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"我叫"</span>+<span class="keyword">this</span>.name+<span class="string">"，我在跑"</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">         <span class="keyword">super</span>(name)</span><br><span class="line">         <span class="keyword">this</span>.gender = <span class="string">'男'</span></span><br><span class="line">     &#125;</span><br><span class="line">     fight()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'糊你熊脸'</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>用class表示一个构造函数，用constructor储存自身属性／私有属性，用函数形式储存公有属性。<br>要做到一个构造函数继承另一个构造函数，只需要两步：<br>    1.用extends；<br>    2.在constructor中用super继承父类的this和变量。</p><p>但是用class的一个缺点是如果想在原型链公有属性上声明一个字符串、数字等数据类型的话无法声明，因为属性全是用方法function表示的，如fight()。所以另一个巧招是：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">     constructor(name)&#123;</span><br><span class="line">         <span class="keyword">super</span>(name)</span><br><span class="line">         <span class="keyword">this</span>.gender = '男'</span><br><span class="line">     &#125;</span><br><span class="line">     get 喉结()&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     fight()&#123;</span><br><span class="line">         console.log('糊你熊脸')</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue几种组件通信情况总结</title>
    <link href="http://yoursite.com/2018/09/13/Vue%E5%87%A0%E7%A7%8D%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%83%85%E5%86%B5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/09/13/Vue几种组件通信情况总结/</id>
    <published>2018-09-12T18:19:21.000Z</published>
    <updated>2019-07-20T11:53:00.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在此总结一下Vue中常见组件通信的几种方法：</p><p>1.父子组件通信：</p><p>数据从上往下传递：<br>父组件通过v-bind的形式将参数传给子组件，子组件通过props接受父组件数据。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:data</span> = <span class="string">parentData</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;data&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'data'</span>]</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            parentData: <span class="string">'这是父组件即将传给子组件的数据'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">'child'</span>: child,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//在以上例子中，父组件的数据通过":"的形式以data这个变量将parentData数据传给了child组件，child用props语法接受这个变量并运用到自己的组件内容中。</span><br></pre></td></tr></table></figure></p><p>数据从下往上传递：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">child-event</span>=<span class="string">"dealChildEvent"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Result:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;number&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    let child = &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('child-event')"</span>&gt;</span>加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`,</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    let app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: '#app',</span></span><br><span class="line"><span class="xml">        data: &#123;</span></span><br><span class="line"><span class="xml">            number: 0,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        methods: &#123;</span></span><br><span class="line"><span class="xml">            dealChildEvent()&#123;</span></span><br><span class="line"><span class="xml">                this.number++;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        components: &#123;</span></span><br><span class="line"><span class="xml">            'child': child,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//在以上的例子中子组件button点击触发了我们自定义的事件'child-event'（注意自定义事件不推荐camelCase写法），然后在父组件中在这个子组件的壳上用‘@’语法对这个自定义事件进行了监听，再用父组件中的方法“dealChildEvent”对事件进行反馈和处理。</span></span><br></pre></td></tr></table></figure></p><p>2.爷孙组件通信<br>Vue中无法隔代直接传数据，需要通过一代传一代的父子传递关系来接替。<br>数据从上往下传递：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:data</span> = <span class="string">parentData</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">   </span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> childChild = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;data&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'data'</span>]</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">child-child</span> <span class="attr">:data</span> = <span class="string">data</span>&gt;</span><span class="tag">&lt;/<span class="name">child-child</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'data'</span>],</span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">'child-child'</span>: childChild,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            parentData: <span class="string">'这是父组件即将传给子子组件的数据'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">'child'</span>: child,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>数据从下往下传递：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">child-child-event</span>=<span class="string">dealChildEvent</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;number&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">   </span></span></span><br><span class="line"><span class="xml">    let childChild = &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('child-child-event')"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`,</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    let child = &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">child-child</span> @<span class="attr">child-child-event</span>=<span class="string">"$emit('child-child-event')"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-child</span>&gt;</span>`,</span></span><br><span class="line"><span class="xml">        props: ['data'],</span></span><br><span class="line"><span class="xml">        components: &#123;</span></span><br><span class="line"><span class="xml">            'child-child': childChild,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    let app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: '#app',</span></span><br><span class="line"><span class="xml">        data: &#123;</span></span><br><span class="line"><span class="xml">            number: 0,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        methods: &#123;</span></span><br><span class="line"><span class="xml">           dealChildEvent()&#123;</span></span><br><span class="line"><span class="xml">               this.number++;</span></span><br><span class="line"><span class="xml">           &#125; </span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        components: &#123;</span></span><br><span class="line"><span class="xml">            'child': child,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>3.兄弟组件通信<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sibling1</span> <span class="attr">:number</span> = <span class="string">number</span> @<span class="attr">emit-from-sibling</span>=<span class="string">'add'</span>&gt;</span><span class="tag">&lt;/<span class="name">sibling1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">sibling1</span> <span class="attr">:number</span> = <span class="string">number</span> @<span class="attr">emit-from-sibling</span>=<span class="string">'add'</span>&gt;</span><span class="tag">&lt;/<span class="name">sibling1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">   </span></span></span><br><span class="line"><span class="xml">    let sibling1 = &#123;</span></span><br><span class="line"><span class="xml">        template: `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;number&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('emit-from-sibling')"</span>&gt;</span>add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        `,</span></span><br><span class="line"><span class="xml">        props: ['number']</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    let sibling2 = &#123;</span></span><br><span class="line"><span class="xml">        template: `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;number&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('emit-from-sibling')"</span>&gt;</span>add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        `,</span></span><br><span class="line"><span class="xml">        props: ['number']</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    let app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: '#app',</span></span><br><span class="line"><span class="xml">        data: &#123;</span></span><br><span class="line"><span class="xml">            number: 0, //这是父组件传给两个子组件的数据</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        methods: &#123;</span></span><br><span class="line"><span class="xml">            add()&#123;</span></span><br><span class="line"><span class="xml">                this.number++;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        components: &#123;</span></span><br><span class="line"><span class="xml">            sibling1,</span></span><br><span class="line"><span class="xml">            sibling2,                </span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue 组件化" scheme="http://yoursite.com/tags/Vue-%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Parcel踩坑记</title>
    <link href="http://yoursite.com/2018/08/15/Parcel%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/15/Parcel踩坑记/</id>
    <published>2018-08-15T15:54:06.000Z</published>
    <updated>2019-07-20T11:53:00.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近做公司的landing page，因为才学了模块化不久，用MVC的方式把每个组件分成单个JS文件来写，刚开始思路的确非常清晰，可到得后面，JS文件多起来，网页开始以肉眼可以观察到的速度变得慢了起来（当然也有引用的媒体文件增多了的原因）。于是在试了下用Parcel将index.js文件作为入口引入别的模块文件之后，速度的确是可以感知的变快了，我觉得并不是心理作用，看来减少http请求的确是有帮助的。</p><p>我担心自己用了Parcel就再也静不下心来学习webpack了，因为深知配置webpack耗费的可不是一两个小时而是整整一段时间，不然也不会有webpack工程师一说。不过parcel真的很好用。遇到一些坑，除此之外parcel真的非常容易上手。现总结如下：</p><p>1.Parcel中使用jQuery在编译完成之后浏览器中会显示’$’undefined。</p><ul><li>原因是parcel使用了闭包所以导致jQuery无法将’$’赋值到window上</li><li>解决办法：<ul><li>使用CDN - 避免对jQuery的编译</li><li>如果仍然想使用本地jQuery而不使用CDN，那么使用parcelignore在编译时忽略jQuery<br>  如node_modules/jQuery // Ignore this entirely</li></ul></li></ul><p>2.Parcel中如果在使用inline-style中引用到了文件，如background-image:url()， 并且在别处的CSS文件中引用了同一文件时，会出现加载资源错误，因为parcel在编译CSS（如果将CSS引入JS中）时会将了图片作为dependencies处理，改变文件的后缀名，CSS中的引用会跟随改变引用名，所以CSS的引用的图片是不会加载错误的，但是好像parcel没有探测到inline-style中的文件引用，所以文件名不会改变，所以就会加载错误。</p><p>3.Parcel在build打包时，如果直接build好像会出现文件资源加载路径出错，需要使用“–public-url ./“ 来打包，所有的文件会放在一个dist（默认）的文件夹中。如果要改变文件夹名称，使用 “-d xxxx”来改变。<br>在正常开发环境时，只需要parcel index.html 这么简单两个单词的命令就可以打包了，并且parcel会自动监测文件的变动并进行模块的热加载。但是需要注意，需要使用parcel返回的那个local网址和端口，否则文件路径会显示错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Parcel" scheme="http://yoursite.com/tags/Parcel/"/>
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>用户注册登陆与Cookie</title>
    <link href="http://yoursite.com/2018/06/15/%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%99%BB%E9%99%86%E4%B8%8ECookie/"/>
    <id>http://yoursite.com/2018/06/15/用户注册登陆与Cookie/</id>
    <published>2018-06-15T14:14:23.000Z</published>
    <updated>2019-07-20T11:53:00.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一个简单用户注册登陆与Cookie保存原理。<br>牵扯到一些简单的后端知识，我学习的时候以Node.js为例学的。</p><p>分三个步骤：<br>1.用户注册<br>用户注册最常见需要做的时间就是表单校验。三大原则：（1）保证邮箱格式正确；（2）保证密码填写；（3）保证密码和确认密码一致。<br>校验可以等用户提交数据给后台时后台来检验发现格式错误返回响应码报错，也可以直接前端校验阻止提交表单。<br>用户注册成功之后，后台直接将用户数据写入数据库；返回成功响应码，前台用promise收到响应码跳转到登陆页面；<br>如果用户重复注册同一账号，由后台查询数据库中是否已经存在有相同的邮箱，如果有，返回相应的响应码报错；</p><p>2.用户登陆<br>用户在登陆页面输入登陆信息，由后台校验邮箱是否存在，密码是否相等，如果是，则返回成功响应码，前台跳转到登陆后页面；<br>但是问题是没登陆的用户也可以直接在地址栏输入登陆后的页面的地址直接跳转，并且如果在登陆后的界面里区分不同的用户身份呢？——所以需要通过Cookie认证用户身份；</p><p>3.Cookie<br>用户第一次登陆时，后台会在验证成功之后在响应头上打上Cookie，里面包含了邮箱，那么这个Cookie就会保存在用户本地，之后用每一次请求新的资源都会在请求头中带上这个Cookie，后台可以通过用户直接在地址栏输入登陆后的界面发送请求的时候先检验是否请求头中有Cookie，这个Cookie中的邮箱是否和数据库中的相匹配，如果是才返回成功响应码，否则拒绝。如果成功，后台顺便取出匹配的用户所有信息（都是以哈希形式储存的），作为JSON返回给前台，前台就这样得到了用户的相应信息，可以将其返回填充到页面中，实现了个性化的个人登陆后的页面。    </p><ul><li>Cookie特点<ul><li>服务器通过Set-Cookie响应头设置Cookie；</li><li>浏览器得到Cookie之后，每次请求都要带上Cookie</li><li>服务器读取Cookie就知道登录用户的信息（email）</li><li>Cookie是跟着浏览器走的，只带同一域名的Cookie</li><li>Cookie可以篡改（不安全）</li><li>Cookie默认有效期20分钟左右；但是后端可以强制修改有效时间</li><li>Cookie一般大小在4K以内</li></ul></li></ul><ul><li>Cookie可以被篡改<br>所以这是为什么需要使用Session来加密的原因，见下一篇文章。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="开发经验" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件总结</title>
    <link href="http://yoursite.com/2018/06/13/DOM%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/13/DOM事件总结/</id>
    <published>2018-06-13T05:18:32.000Z</published>
    <updated>2019-07-20T11:53:00.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>DOM定义的发展经历了几代，第一代称为DOM0:</p><ul><li>DOM 0<br>  如何绑定事件：<br>  btn.onclick =  function() {}<br>  btn.onclick.call(btn, arguments…)</li></ul><p>第二代称为DOM1</p><ul><li><p>DOM 1<br>  升级汇总前一阶段</p></li><li><p>DOM事件升级纪年<br>DOM 1 - 2000<br>DOM 2<br>DOM Event事件的最新标准是DOM2中的标准</p></li></ul><p>DOM1中绑定事件:<br>在HTML中<br><code>&lt;button id = X onclick = &#39;print()&#39;&gt; A &lt;/button&gt;</code><br>onclick = ‘要执行的代码’<br>一旦用户点击，浏览器会用eval来执行等号后的代码，eval(print())</p><p>在JS中<br>X.onclick = print<br>因为X.onclick对应一个函数，所以右边只需要是一个函数即可</p><p>DOM2:<br>xxx.addEventListener(‘click’, function() {})</p><p>两者区别：<br>DOM1中，由于onclick是一种属性，那么它是唯一的，所以无法给onclick绑定两个属性</p><p>DOM2中：<br>addEventListener建立的是一个队列<br>移除队列中的function，用removeEventListener(‘click’, function名字)<br>前提是知道function的名字，而非使用匿名函数</p><p>用removeEventListener实现一次事件监听，这也是<code>one</code>监听一次事件的实现原理</p><h1 id="事件模型-捕获-冒泡"><a href="#事件模型-捕获-冒泡" class="headerlink" title="事件模型 捕获 | 冒泡"></a>事件模型 捕获 | 冒泡</h1><p>假如三个div嵌套，从外到内的div分别类比成爷爷，爸爸，儿子，那么点击儿子的时候，如果使用<code>addEventListener</code>API, <code>El.addEventListener(&#39;onclick&#39;, function(){})</code>不传第三个参数（不传第三个参数JS默认帮我们传false），那么点击事件函数触发的方式分别是从内到外，那么分别绑定在三代上的事件触发的顺序就是由内到外；如果第三个参数传参数为true的话，函数的触发顺序分别是从外到内。</p><p>但是有个特例，如果是被点击的元素本身同时有两个事件（分别传入了true和false——声明了想要选择冒泡或者捕获模型），那么事件函数执行的顺序是按照函数注册（书写）的顺序触发的。 </p><h1 id="事件捕获冒泡用例"><a href="#事件捕获冒泡用例" class="headerlink" title="事件捕获冒泡用例"></a>事件捕获冒泡用例</h1><p>事件的捕获冒泡模型的最佳应用场景应该就是在点击页面其余地方关闭浮动窗口了。<br>这是用户体验的一大进步，用户永远不用再心累的一定要精准地点到那个右上角小叉叉才能关闭浮动窗口，而是轻松地往窗口外任何一个地方一点就能关闭窗口。<br>实现这个效果的基本原理就是监听整个页面——document，只要点到它身上时就关闭窗口。<br>但是问题在于就算点到document里的触发窗口的button，其本质也算点到document，就像我打你的鼻子，也是在打你一样。那么最后事件一定会从button起往上冒泡触发绑定在document上的关闭窗口事件，那么窗口刚因为button被点击打开了就又因为document被点击给关闭了。<br>所以这个时候需要在触发button是阻止事件的冒泡：e.stopPropagation();</p><p>但是这样有一个缺点。如果页面的浮动窗口过多，那么关闭浮层所需要在页面监听的事件也越多，会浪费内存。所以最好是使用JQuery中的one功能，如：<br>        <figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(button).on(‘click’, <span class="function"><span class="keyword">function</span><span class="params">(<span class="number">0</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">$<span class="params">(‘pop’)</span>.show<span class="params">()</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">$<span class="params">(document)</span>.one<span class="params">(‘click’, function<span class="params">()</span> &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">$<span class="params">(‘pop’)</span>.hide<span class="params">()</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">&#125;)</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">$<span class="params">(浮层和button的父元素)</span>.<span class="title">on</span><span class="params">(‘click’, function<span class="params">(e)</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">e.stopPropagation<span class="params">()</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br></pre></td></tr></table></figure></p><pre><code>为什么需要上面代码中的e.stopPropagation()部分？因为事件会冒泡，添加在document上的事件即使在button点击后才被添加，但是点击之后触发的顺序是：浮层显示同时添加事件监听给页面；浮层显示结束后开始冒泡，此时事件监听添加已经完成，所以在冒泡到document时事件已经被绑定上去了，一样会触发事件，所以不用e.stopPropagation()一样没有效果。</code></pre><p>但是除了以上寻找button和document中间元素使用e.stopPropagation()的写法，更有效的方法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(button).on(‘click’, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="number">0</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">$(‘pop’</span>).<span class="title">show</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"><span class="title">setTimeout</span>(<span class="params">function(</span>) </span>&#123;</span><br><span class="line">$(<span class="built_in">document</span>).one(‘click’, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(‘pop’).hide();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现类JQuery的简单封装</title>
    <link href="http://yoursite.com/2018/05/15/%E5%AE%9E%E7%8E%B0%E7%B1%BBJQuery%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2018/05/15/实现类JQuery的简单封装/</id>
    <published>2018-05-15T14:00:12.000Z</published>
    <updated>2019-07-20T11:53:00.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>原来JQuery只是一个构造函数！<br>实现JQuery只需要写好一个函数，把所有JQuery的方法封装进去！<br>封装进去后只需要用JQuery函数获取参数就可以使用所有方法！</p><p>1.首先在全局创建JQuery函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.JQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个selector即将作为我们之后常见的选择器或者实现‘链式操作’的先决条件；</p><p>2.判断这个用户给予的input是否是一个selector或者已经是一个Node<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            node[i] = temp[i];</span><br><span class="line">            node.length = temp.length; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeOrSelector <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">            node = &#123;</span><br><span class="line">                <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">                length: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是一个选择器，那么调用原生DOM的API选择元素并且放到伪数组中node中；<br>如果是一个Node，那么为了保持return object的一致性，也强行把它转化成一个伪数组, 这一点实现了我们的链式操作；</p><p>3.接着为node添加各种自定义的API，在这里，也就是我们自己写的JQuery API。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            node[i] = temp[i];</span><br><span class="line">            node.length = temp.length; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeOrSelector <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">            node = &#123;</span><br><span class="line">                <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">                length: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    node.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.length; i++) &#123;</span><br><span class="line">              node[i].classList.add(classes)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    node.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.length; i++) &#123;</span><br><span class="line">            node[i].textContent = text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.最后一步，怎么用呢？需要先把node return出来给用户使用啊<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            node[i] = temp[i];</span><br><span class="line">            node.length = temp.length; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeOrSelector <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">            node = &#123;</span><br><span class="line">                <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">                length: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    node.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.length; i++) &#123;</span><br><span class="line">              node[i].classList.add(classes)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    node.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.length; i++) &#123;</span><br><span class="line">            node[i].textContent = text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.最最后一步，’JQuery’几个字写起来太麻烦，所以在全局变量中用‘$’取代’JQuery’<br>window.$ = JQuery;</p><p>所以之后的调用就可以先用$(‘div’)选中元素再使用方法了！<br>$(‘div’).addClass(‘red’)</p><p>所以JQuery最最基本的封装原理就是这样。</p><h2 id="JQuery-源码精髓：-JQuery接受一个旧的节点-（或者字符串CSS选择器），反回一个新的对象，这个对象当中带有所有JQuery的新的API-（JQuery实质上是一个函数）"><a href="#JQuery-源码精髓：-JQuery接受一个旧的节点-（或者字符串CSS选择器），反回一个新的对象，这个对象当中带有所有JQuery的新的API-（JQuery实质上是一个函数）" class="headerlink" title="JQuery 源码精髓： JQuery接受一个旧的节点 （或者字符串CSS选择器），反回一个新的对象，这个对象当中带有所有JQuery的新的API （JQuery实质上是一个函数）."></a>JQuery 源码精髓： JQuery接受一个旧的节点 （或者字符串CSS选择器），反回一个新的对象，这个对象当中带有所有JQuery的新的API （JQuery实质上是一个函数）.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>常见的一些页面JS特效分析</title>
    <link href="http://yoursite.com/2018/04/05/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A1%B5%E9%9D%A2JS%E7%89%B9%E6%95%88%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/04/05/常见的一些页面JS特效分析/</id>
    <published>2018-04-05T08:45:46.000Z</published>
    <updated>2019-07-20T11:53:00.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近还是在用原生JS写特效，Jquery虽好，但是原生的玩转了才能在将来用Jquery叱咤风云。</p><p>常见的页面特效这次介绍几个：loading animation（加载动画）， 导航栏的跟随变化，导航栏的高亮，页面平缓滚动的特效，导航栏的鼠标hover，以及常见的程序员简历各种技能栈加载时的技能条加载特效。</p><h3 id="Loading-Animation"><a href="#Loading-Animation" class="headerlink" title="Loading Animation"></a>Loading Animation</h3><p>之前一直以为loading animation是多么高大上的事情，需要在服务器端或者后台获取什么数据加载完成与否的信息。后来发现，完全可以在浏览器端巧妙的解决这个问题。理解Loading Animation需要对网页的页面渲染有一个基本的了解。其实页面各种资源加载完成与否某种程度上就是在于html是否从头run到了尾。那么在body头部插入加载动画，遮住背后还未加载完成的各种信息，再在页面body的最后一个标签后加上script从DOM中移除这个loading元素就可以了。这种的逻辑比较巧妙：如果页面已经运行到了我移除animation的位置，那么是否意味着前面的标签也加载完毕了呢？那么这个时候移除animation是非常顺理成章的。</p><h3 id="导航栏的跟随变化"><a href="#导航栏的跟随变化" class="headerlink" title="导航栏的跟随变化"></a>导航栏的跟随变化</h3><p>很多fancy网页中都有导航栏的跟随功能，也就是页面打开时导航栏跟页面是融为一体的，而当用户滑过一个临界点的时候突然粘在了页面顶部，其实这个和之后很多的特效原理一样，都是通过时刻感知用户的滑动事件获取当前的视口（视窗）顶部距离页面顶部来决定的。</p><p>感知滚动的两种事件：onscroll, onwheel</p><p>接下来在事件回调函数中获取距离页面顶部滑动的距离，用window.scrollY，如果超过一定的距离，那么就给navbar加上一定的class属性来改变其特性。</p><h3 id="导航栏的点击和高亮"><a href="#导航栏的点击和高亮" class="headerlink" title="导航栏的点击和高亮"></a>导航栏的点击和高亮</h3><p>导航栏的每个分项hover时下面有一条线高亮，这个既可以通过CSS做也可以用JS做，但是JS做有更多的可控性。<br>所以用JS的mouseenter和mouseleave事件监听器</p><h5 id="target-amp-currentTarget"><a href="#target-amp-currentTarget" class="headerlink" title="target &amp; currentTarget"></a>target &amp; currentTarget</h5><p>在用户事件监听的callback回调函数中，又常会遇到这个问题———我是用target这个属性来获取DOM元素好呢还是currentTarget好呢？</p><p>太多的文章讲target &amp; currentTarget了，我就简单一句话总结一下，</p><p>用户操作的元素： target<br>我们监听的元素： currentTarget</p><p>意思就是用户点击的是哪个，那target获取到的就是哪个(就是用户最精准的点击到的那一个，只有那一个)。因为不要忘了如果用户点击一个div里面的button里面的span，他形式上实际是同时点击到了这三个元素的，而target获取的是当前点击的最底层的那个；</p><p>currentTarget简单明了，你这个监听器装在哪个元素上，我就获取那个，即使点击到监听的这个元素内部的别的元素，我也只给你返回这个被监听的元素。</p><p>(但是mouseenter事件不会有这两种区别，常见于click等事件)</p><h5 id="如何获取不同元素——子元素／兄弟元素／父元素等"><a href="#如何获取不同元素——子元素／兄弟元素／父元素等" class="headerlink" title="如何获取不同元素——子元素／兄弟元素／父元素等"></a>如何获取不同元素——子元素／兄弟元素／父元素等</h5><p>获取子元素: <code>element.children</code><br>获取父元素: <code>element.parentNode</code> &amp; <code>element.parentElement</code><br>获取兄弟元素: 很多时候获取兄弟元素浏览器有一个“bug”。</p><p>在使用nextSibling的时候可能获取到的是两个element之间的回车 – 解决办法：递归<br>let brother = a.nextSibling;<br>while(brother.nodeType === 3) {<br>    brother = brother.nextSibling;<br>}</p><p>(或者把brother.nodeType === 3换成brother.tagName === 想找到的tagName（必须大写）)</p><p>目前有document.nextElementSibling API可以解决这个问题，但是IE8和Safari存在兼容问题</p><h3 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h3><p>页内跳转我之前的博客写过一篇关于CSS的用法，但是浏览器兼容目前还存在比较大的问题，所以暂时应用场景很窄。JS实现的页面平滑跳转有很多可塑性，包括跳转的速度，跳转到的高度等都是可以控制的。</p><p>页内跳转在使用a标签锚点ID进行跳转时有可能因为页面顶部浮动的navbar遮挡住跳转到的标签的顶部，解决这个“bug”的办法是可以在跳转到的元素上用padding把元素在页面上的定位伪装一下，但是用JS来解决更佳。</p><p>通常需要先阻止默认的跳转行为，用e.preventDefault(),接着获取每次点击时当前被点击的标签的href（但是这里有bug，如果直接用a.href获取，浏览器会默认解析href，加上http协议，所以应该使用a.getAttribute(‘href’)），接着再获取应跳转到的那个元素距离整个页面顶部的距离（用element.offsetTop获取，注意：用element.getBoundingClientRect获取到的距离是标签相对于视口，也就是当前所看到的顶部的距离，这个距离会随着滚动一直变化，所以在此情景下不适用），再用window.scrollTo()让页面滚动到标签距离页面的距离左右的位置</p><h3 id="获取当前所在区域并高亮nav"><a href="#获取当前所在区域并高亮nav" class="headerlink" title="获取当前所在区域并高亮nav"></a>获取当前所在区域并高亮nav</h3><ul><li>可以用data-xxx来标注一类标签并用querySelector[‘data-xxx’]来获取</li><li><p>比较当前页面距离页面顶端的距离和每一个元素距离页面顶端的距离大小，算出最小那个，获取其id来找到对应的navbar，接着再高亮navbar</p></li><li><p>解决滑动到对应位置navbar高亮和hover navbar高亮都加active class冲突的问题——用不同的class</p></li></ul><h3 id="让元素一开始就浮动起来的原理"><a href="#让元素一开始就浮动起来的原理" class="headerlink" title="让元素一开始就浮动起来的原理"></a>让元素一开始就浮动起来的原理</h3><p>很多library可以实现这个scroll-and-reveal的效果，其实原理很简单，就是将监听scroll事件获取的视口距离页面高度和获取的元素距离视口高度俩参数封装起来，再让用户输入需要实现此效果的元素。其背后的原理就是：<br>先让元素一开始带上offset class，在移动到它附近的时候移除这个offset class（在offset这个class上写各种CSS特效）</p><p>#给技能栈progress bar加上animation的方法，同上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>canvas画板项目知识点总结</title>
    <link href="http://yoursite.com/2018/03/25/canvas%E7%94%BB%E6%9D%BF%E9%A1%B9%E7%9B%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/25/canvas画板项目知识点总结/</id>
    <published>2018-03-25T04:11:33.000Z</published>
    <updated>2019-07-20T11:53:00.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近学习canvas，用其做了一个画板。画板支持画画，擦除，选色，以及保存导出等功能。最主要是通过这一个项目熟悉了canvas的API， 并且由于需要做移动触屏上的支持，所以对移动端的用户事件，移动端事件和PC端事件的区别有了更多的了解。这是项目地址： <a href="https://sy2729.github.io/canvas-draw/." target="_blank" rel="noopener">Canvas-draw</a></p><p>这个项目大概涉及到的知识点有：</p><ol><li>画板的鼠标事件：</li></ol><p>(1)按下鼠标；<br>    <code>document.onmousedown</code></p><p>(2)动鼠标；<br>    <code>document.onmousemove</code></p><p>(3)松开鼠标；<br>    <code>document.onmouseup</code></p><ol><li><p>如何通过一个变量作为开关触发和关闭点击状态，实现鼠标移动时作画；</p></li><li><p>用div作画的缺陷，浏览器无法实时非常快速的监听事件，有延迟；</p></li><li><p>Canvas的缩放方式为等比缩放</p></li><li><p>API</p> <figure class="highlight plain"><figcaption><span>ctx </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeStyle;</span><br><span class="line">ctx.strokeRect;</span><br><span class="line"></span><br><span class="line">ctx.fillStyle;</span><br><span class="line">ctx.fillRect;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.clearRect;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.beginPath;</span><br><span class="line">ctx.moveTo</span><br><span class="line">ctx.lineTo</span><br><span class="line">ctx.lineWidth</span><br><span class="line">ctx.fill</span><br><span class="line">//会自动闭合</span><br><span class="line">ctx.closePath</span><br><span class="line"></span><br><span class="line">ctx.beginPath</span><br><span class="line">ctx.arc</span><br><span class="line">ctx.fill</span><br></pre></td></tr></table></figure></li><li><p>常见的一个bug，很多人忽略了鼠标事件<code>clientX</code>和<code>clientY</code>所获取的坐标是相对于viewport（html）的坐标，canvas默认贴近viewport左上角，所以鼠标在canvas上的坐标就是在viewport上的坐标。但倘若一旦改变了canvas的边距，就会产生bug</p></li></ol><ol><li>获取页面高度宽度API<br><code>width: document.documentElement.clientWidth;</code></li></ol><p><code>height: document.documentElement.clientHeight</code></p><p><code>document.documentElement.clientWidth</code> 这个 API 的作用是获取document宽度，也就是viewport的宽度</p><ol><li><p>移动端touch事件替代mouse事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ontouchmove</span><br><span class="line">ontouchend</span><br></pre></td></tr></table></figure></li><li><p>根据设备支不支持touch事件来决定监不监听touch事件 – 特性检测</p></li></ol><p><code>div.ontouchstart = undefined</code> 表示不支持touch事件</p><p><code>div.ontouchstart = null</code> 表示支持touch事件</p><ol><li><p>touches支持多点触控，将所有触控点收集起来存放在touches中<br>所以移动端获取触控点的X、Y坐标时的API是<br><code>e.touches[0].clientX</code></p></li><li><p>防止手机端出现滚动条或者页面在画画时滑动的办法：<br>让canvas绝对定位；</p></li><li><p>canvas 保存画布为图片的方式是给一个a标签然后用canvas的toDataURL()API然后将canvas的整体存为一个字符串作为a标签的链接，紧接着再下载。</p></li><li><p>用局域网进行快速调试：查看电脑端网络TCP／IP地址中的IPv4地址。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="开发经验" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>简易NavBook导航网站实现及知识点总结</title>
    <link href="http://yoursite.com/2018/03/22/%E7%AE%80%E6%98%93NavBook%E5%AF%BC%E8%88%AA%E7%BD%91%E7%AB%99%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/22/简易NavBook导航网站实现及知识点总结/</id>
    <published>2018-03-22T05:18:16.000Z</published>
    <updated>2019-07-20T11:53:00.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近做的小项目是一个导航网站，用户可以自定义编辑快捷键对应的网址- <a href="https://sy2729.github.io/navbook/" target="_blank" rel="noopener">Navbook</a>。实现过程中大概运用到的知识点有：</p><p>1.100vh 指屏幕（视口）高度;</p><p>2.浏览器访问页面icon的方式是访问网址根目录下的favicon.ico;例如www.qq.com/favicon.ico</p><p>3.403 forbidden</p><ul><li>如何通过循环不断生成相互嵌套的div</li><li>如何监听键盘事件并通过键盘址打开hash中对应的网址；</li><li>如何点击对应键盘中的按钮修改hash中对应键盘储存的网址；</li><li>如何利用localStorage存储用户设置；</li><li>如何询问用户并获取用户输入；</li><li>如何获取各个网站的fivcon；</li><li>如何捕获错误事件，并为之准备一个备用fivcon</li><li>如何更好的封装函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="开发经验" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>BFC块级格式化上下文学习笔记</title>
    <link href="http://yoursite.com/2018/03/17/BFC%E5%9D%97%E7%BA%A7%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/17/BFC块级格式化上下文学习笔记/</id>
    <published>2018-03-17T02:29:44.000Z</published>
    <updated>2019-07-20T11:53:00.071Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>跟定位，浮动，布局等问题类似，CSS中除了这些难点重点之外还存在一个常被面试官提起的知识点——BFC。但是对此很多人存在争议，BFC真的是重点吗？从我学习的感受来看，BFC由于建立在对浮动所带来的副作用的理解基础上，目前只能算难点，但是实际应用来看，由于其自身也会带来额外的副作用（除非用并未得到所有浏览器支持的属性<code>display: flow-root</code>实现），其实用价值并不足以使其成为重点。但无论如何，它都是面试的一个重点。</p><p>了解BFC的主要两点：</p><h2 id="BFC定义"><a href="#BFC定义" class="headerlink" title="BFC定义"></a>BFC定义</h2><h5 id="CSS规范中对-BFC-的描述"><a href="#CSS规范中对-BFC-的描述" class="headerlink" title="CSS规范中对 BFC 的描述"></a>CSS规范中对 BFC 的描述</h5><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9.4</span>.<span class="number">1</span> 块格式化上下文</span><br><span class="line"></span><br><span class="line">浮动，绝对定位元素，非块盒的块容器（例如，inline-blocks，table-cells和table-captions）和<span class="string">'overflow'</span>不为<span class="string">'visible'</span>的块盒会为它们的内容建立一个新的块格式化上下文</span><br><span class="line"></span><br><span class="line">在一个块格式化上下文中，盒在竖直方向一个接一个地放置，从包含块的顶部开始。两个兄弟盒之间的竖直距离由<span class="string">'margin'</span>属性决定。同一个块格式化上下文中的相邻块级盒之间的竖直margin会合并</span><br><span class="line"></span><br><span class="line">在一个块格式化上下文中，每个盒的<span class="literal">left</span>外边（<span class="literal">left</span> outer edge）挨着包含块的<span class="literal">left</span>边（对于从右向左的格式化，<span class="literal">right</span>边挨着）。即使存在浮动（尽管一个盒的行盒可能会因为浮动收缩），这也成立。除非该盒建立了一个新的块格式化上下文（这种情况下，该盒自身可能会因为浮动变窄）</span><br></pre></td></tr></table></figure><h2 id="BFC功能"><a href="#BFC功能" class="headerlink" title="BFC功能"></a>BFC功能</h2><p>（1）管理内部子元素<br>        让不受管理（包不住）的子元素接受管理<br>        让父元素浮动／绝对定位／变成不是block的block（inline-block、table-cell，table-caption）／非overflow：visible／display：flow-root(最新标准，作用是仅处罚BFC且不带来任何多余效果，但浏览器支持有限)</p><p>(2）使子元素们的竖直margin合并</p><pre><code>*但是此BFC不会管其子元素创建的新BFC中的子元素（包不住孙元素），    如果BFC2不管孙元素，那么BFC就要管孙元素，反之则反，例如：    `    BFC      -子元素／BFC2        -孙元素    `</code></pre><p>（3）让内部元素和外部元素划清界限／兄弟之间划清界限</p><p>*总结：BFC能和清除浮动实现一样的效果，但是可能带来额外的副作用，而不带来副作用的纯制造BFC的样式<code>display： flow-root</code>目前又存在浏览器兼容问题。所以BFC是时代的产物，一般情况下不用。在某些情况下，当子元素想要穿透父元素时，也可以用border-top属性来替代BFC</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>兼容IE6的一些Hack</title>
    <link href="http://yoursite.com/2018/03/13/%E5%85%BC%E5%AE%B9IE6%E7%9A%84%E4%B8%80%E4%BA%9BHack/"/>
    <id>http://yoursite.com/2018/03/13/兼容IE6的一些Hack/</id>
    <published>2018-03-13T12:17:27.000Z</published>
    <updated>2019-07-20T11:53:00.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>有前端工程师称自己可以不用框架从主流浏览器一直写代码到兼容到IE6，这的确是很吊了。在这个框架横行的年代，连大多数框架都放弃了IE6-8，还在为各政府及大型国企，公立机构等写网站的工程师确实不得不忍受IE浏览器。不过作为小菜鸟，目前我只稍微了解了一些常见的IE8一下的兼容方式。</p><h3 id="1-IE6双倍边距"><a href="#1-IE6双倍边距" class="headerlink" title="1.IE6双倍边距"></a>1.IE6双倍边距</h3><p>产生因素：当元素有float属性，又有margin属性时，在IE6下面显示的margin的值是设置值的两倍。</p><p>解决方法：将有float属性的元素添加display:inline属性。</p><h3 id="2-伪类选择器hover"><a href="#2-伪类选择器hover" class="headerlink" title="2.伪类选择器hover"></a>2.伪类选择器hover</h3><p>产生因素：IE6只支持a标签的CSS定义hover效果，其他标签添加hover效果没有任何作用。</p><p>解决方法：一方面可以使用JavaScript添加鼠标移入效果，另一方面只能将其他标签改变为a标签后再添加hover效果。</p><h3 id="3-定义元素的不透明度"><a href="#3-定义元素的不透明度" class="headerlink" title="3.定义元素的不透明度"></a>3.定义元素的不透明度</h3><p>产生因素：opacity:0.5，可以改变元素的透明度，取值范围是0~1，但是IE6不支持这种透明度表现方式。</p><p>解决方法：IE6浏览器专属的透明度属性， filter：alpha（opacity=80），取值范围是0~100。</p><h3 id="4-IE各个版本hack"><a href="#4-IE各个版本hack" class="headerlink" title="4.IE各个版本hack"></a>4.IE各个版本hack</h3><pre><code>属性hack方式</code></pre><p>.box {_width:100px;}             /<em> IE6专用</em>/</p><p>.box {<em>+width:100px;}          /</em> IE7专用*/</p><p>.box {<em>width:100px;}            /</em> IE6、IE7共用*/</p><p>.box {width:100px\0;}           /<em> IE8、IE9共用</em>/</p><p>.box {width:100px\9;}           /<em> IE6、IE7、IE8、IE9共用</em>/</p><p>.box {width:330px\9\0;}        /<em> IE9专用</em>/</p><pre><code>选择器hack</code></pre><p><em>html .box{width:100px;}       /</em>IE6*/ </p><p><em>+html .box{width:100px;}     /</em>IE7*/ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记-布局及基础复习</title>
    <link href="http://yoursite.com/2018/03/12/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%83%E5%B1%80%E5%8F%8A%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/03/12/CSS学习笔记-布局及基础复习/</id>
    <published>2018-03-12T04:28:25.000Z</published>
    <updated>2019-07-20T11:53:00.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>CSS中的line-height是一个很复杂的知识点，因为涉及到了字体设计的相关理论。很多人瞧不起页面仔，但是如果真的想要切出跟设计图一摸一样的网站，拥有一双像素眼，那还是很有难度的。最近复习CSS布局理论和line-height相关知识的时候再一次体会到了这一点。而且意识到了自己之前布局bug比较多可能是因为自己比较喜欢把宽高写死。</p><p>1.div高度(块级元素高度)由其内部文档流元素的高度总和决定（文档流就是文档内元素的流动方向）；<br>内联元素从左往右流动，如果流动遇到阻碍，换行；<br>如果是块级元素，每一块占一行，从上往下流动。<br>如果span元素在流动时被截断（其本身带有border属性），元素会被截成两行，但是border不会；长单词不会换行（除非添加CSS属性<code>word-break: break-all</code>）这一个我体会非常深刻，之前的日志中提到过曾经被困扰很久就是因为长单词默认不会换行。</p><p>2.文字的居中不是让文字的中线居中，而是基线居中；为了美观目的，字体都会有一个默认的建议行高，根据字体和字的大小改变。</p><p>3.<code>font-size</code>实际上规定的是文字中最高一点到最低一点的距离；</p><p>4.脱离文档流的元素不再影响父元素的高度；</p><p>5.当<code>position：fixed</code>时，块级元素的宽度会往内缩；</p><p>6.尽量少使用<code>width</code>和<code>height</code>将宽高写死，多使用<code>max-width</code>，<code>max-height</code>；</p><p>7.<code>span</code>不接受设置宽高；</p><p>8.<code>line-height</code>可能在不同机器上显示不同，最好固定（声明）一下；</p><p>9.如果svg在a中上下边距不一样，使用<code>vertical-align：top</code>实现垂直居中；</p><p>10.<code>display-inline</code>的元素不接受<code>margin-top</code>／<code>margin-bottom</code>的设置；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
</feed>
